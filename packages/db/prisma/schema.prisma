generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id    String @id @default(uuid())
  name  String
  role  String
  scans Scan[]
}

model Plant {
  id        String       @id @default(uuid())
  name      String
  location  String?
  latitude  Float?
  longitude Float?
  boxes     Box[]
  depots    DepotPlant[]
}

model Depot {
  id           String        @id @default(uuid())
  name         String
  location     String?
  latitude     Float?
  longitude    Float?
  plants       DepotPlant[]
  distributors Distributor[]
}

model DepotPlant {
  id      String @id @default(uuid())
  plantId String
  depotId String
  depot   Depot  @relation(fields: [depotId], references: [id], onDelete: Cascade)
  plant   Plant  @relation(fields: [plantId], references: [id], onDelete: Cascade)

  @@unique([plantId, depotId], name: "unique_plant_depot")
  @@index([plantId], map: "idx_depotplant_plantId")
  @@index([depotId], map: "idx_depotplant_depotId")
}

model Distributor {
  id        String  @id @default(uuid())
  name      String
  location  String?
  latitude  Float?
  longitude Float?
  depotId   String
  depot     Depot   @relation(fields: [depotId], references: [id], onDelete: Cascade)
  orders    Order[]
}

model Order {
  id            String      @id @default(uuid())
  distributorId String
  createdAt     DateTime    @default(now())
  status        String      @default("Pending")
  boxes         Box[]
  distributor   Distributor @relation(fields: [distributorId], references: [id], onDelete: Cascade)

  @@index([distributorId], map: "idx_orders_distributorId")
  @@index([status], map: "idx_orders_status")
}

model Box {
  id             String   @id @default(uuid())
  uid            String   @unique
  plantId        String
  manufacturedAt DateTime @default(now())
  orderId        String?
  order          Order?   @relation(fields: [orderId], references: [id])
  plant          Plant    @relation(fields: [plantId], references: [id], onDelete: Cascade)
  scans          Scan[]

  @@index([uid], map: "idx_boxes_uid")
  @@index([orderId], map: "idx_boxes_orderId")
  @@index([plantId], map: "idx_boxes_plantId")
}

model Scan {
  id           String    @id @default(uuid())
  boxId        String
  employeeId   String?
  locationType String
  locationId   String
  scanType     String
  scannedAt    DateTime  @default(now())
  latitude     Float?
  longitude    Float?
  box          Box       @relation(fields: [boxId], references: [id], onDelete: Cascade)
  employee     Employee? @relation(fields: [employeeId], references: [id])

  @@index([boxId], map: "idx_scans_boxId")
  @@index([employeeId], map: "idx_scans_employeeId")
  @@index([locationType, locationId], map: "idx_scans_locationType_locationId")
  @@index([scannedAt], map: "idx_scans_scannedAt")
}
